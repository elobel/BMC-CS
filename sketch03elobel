/*****************************************************************
 * Assignment #3
 * Name: Emily Lobel
 * E-mail: elobel@brynmawr.edu
 * Course: CS 110-01 DK
 * Date Submitted: October 4, 2016
 *
 * This program codes for a mandala pattern
 * with several randomized color elements and a 
 * nice red flower in the middle! I hope you enjoy
 * looking at it as much as I enjoyed coding it!
 ******************************************************************/
float x=0;
float y=0;
float a=0;
float b=0;


void setup() {
  size(displayWidth, displayHeight);
  background(255);
  translate(displayWidth/2, displayHeight/2);
  stroke(0);
  for (int w=0; w<=2; w++){
  fill(255);
  star(20, 280, 380);
  fill(0);
  star(20, 250, 350);
  rotate(PI/4);
  }
  noStroke();
  rotate(-PI/4);
  for (int i=0; i<=6; i++) {
    fill(random(255), random(255), random(255));
    star(10, 200, 315);
    rotate(PI/6);
  } //for
  fill(0, 255, 172);
  ellipse(0, 0, 530, 530);
  fill(10, 245, 162);
  ellipse(0, 0, 500, 500);
  fill(20, 235, 152);
  ellipse(0, 0, 470, 470);
  fill(30, 225, 142);
  ellipse(0, 0, 440, 440);
  for (int s=0; s<=9; s++) {
    fill(random(255), random(255), random(255));
    polygon(5, 240);
    rotate(PI/9);
  } // for
  fill(253, 157, 255);
  ellipse(0, 0, 430, 430);
  fill(0);
  ellipse(0, 0, 420, 420);
  fill(243, 147, 245);
  ellipse(0, 0, 400, 400);
  fill(0);
  star(8, 150, 200);
  fill(255);
  rotate(-PI/7);
  star(8, 150, 200);
  for (int a=0; a<=8; a++) {
    fill(random(255), random(255), random(255));
    star(8, 140, 190);
    scale(.9);
  }
  fill(255);
  ellipse(0, 0, 200, 200);
  rotate(-PI/7);
  noStroke();
  for (int q=0; q<=2; q++) {
    fill(255, 72, 72);
    ellipseMode(CORNERS);
    ellipse(-100, -20, 0, 20);
    ellipse(100, -20, 0, 20);
    ellipse(-20, -100, 20, 0);
    ellipse(-20, 100, 20, 0);
    rotate(PI/4);
  }
  ellipseMode(CENTER);
  fill(220, 250, 157);
  ellipse(0, 0, 40, 40);
} // setup

//function definition
void star( float nPoints, float iRadius, float oRadius) {

  float theta = 0;
  float delta = 2*PI/(2*nPoints);
  beginShape();
  for (float n=0; n <= nPoints; n++) {

    // inner points
    x=iRadius*cos(theta);
    y=iRadius*sin(theta);
    vertex(x, y);
    theta = theta + delta;
    // outer points
    a=oRadius*cos(theta);
    b=oRadius*sin(theta);
    vertex(a, b);
    theta = theta + delta;
  } //loop
  endShape(CLOSE);
} // function 


void polygon( int sides, float radius) {
  float theta = 0;
  float x = 0;
  float y = 0;

  beginShape();
  for (int i=0; i<sides; i++) {
    x = radius*cos(theta);
    y = radius*sin(theta);
    vertex(x, y);
    theta = theta + TWO_PI/sides;
  }
  endShape(CLOSE);
}
